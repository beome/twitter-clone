{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, dummyPost, REMOVE_POST_OF_ME, generateDummyPost, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:3065/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/addPost', postData);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post('/api/removePost');\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI); \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.post('/api/loadPosts');\n}\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(loadPostsAPI); \n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/sagas/post.js"],"names":["all","call","delay","fork","put","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","REMOVE_POST_OF_ME","generateDummyPost","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","defaults","baseURL","addPostAPI","postData","post","addPost","action","result","data","type","newPost","err","error","response","addCommentAPI","addComment","removePostAPI","removePost","loadPostsAPI","loadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, dummyPost, REMOVE_POST_OF_ME, generateDummyPost, \n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\naxios.defaults.baseURL = 'http://localhost:3065/post';\n\nfunction addPostAPI(postData) {\n  return axios.post('/addPost', postData);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); \n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post('/api/removePost');\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI); \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.post('/api/loadPosts');\n}\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(loadPostsAPI); \n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}