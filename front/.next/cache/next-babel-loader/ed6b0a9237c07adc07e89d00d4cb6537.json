{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortid from 'shortid';\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false\n};\nexport const dummyPost = {\n  id: shortid.generate(),\n  content: '더미데이터입니다.',\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport const addComment = () => {\n  type: ADD_COMMENT_REQUEST;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostDone: true,\n          mainPosts: [dummyPost, ...state.mainPosts]\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostDone: false,\n          addPostError: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: true,\n          mainPosts: _objectSpread(_objectSpread({}, state.mainPosts), {}, {\n            Comments: action.data\n          })\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: false,\n          addCommentError: action.error\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/reducers/post.js"],"names":["shortid","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","generate","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","error"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초',\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero',\n      },\n      content: '우와 개정판이 나왔군요~',\n    }, {\n      User: {\n        nickname: 'hero',\n      },\n      content: '얼른 사고싶어요~',\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false,\n}\n\nexport const dummyPost = {\n  id: shortid.generate(),\n  content: '더미데이터입니다.',\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n};\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => {\n  return ({\n    type: ADD_POST_REQUEST,\n    data: data,\n  });\n};\n\nexport const addComment = () => {\n  type: ADD_COMMENT_REQUEST\n};\n\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST: {\n      return {\n        ...state,\n        addPostLoading: true,\n      };\n    }\n    case ADD_POST_SUCCESS: {\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostDone: true,\n        mainPosts: [dummyPost, ...state.mainPosts],\n      };\n    }\n    case ADD_POST_FAILURE: {\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostDone: false,\n        addPostError: action.error,\n      };\n    }\n    case ADD_COMMENT_REQUEST: {\n      return {\n        ...state,\n        addCommentLoading: true,\n      };\n    }\n    case ADD_COMMENT_SUCCESS: {\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentDone: true,\n        mainPosts: {\n          ...state.mainPosts,\n          Comments: action.data,\n        }\n      };\n    }\n    case ADD_COMMENT_FAILURE: {\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentDone: false,\n        addCommentError: action.error,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}