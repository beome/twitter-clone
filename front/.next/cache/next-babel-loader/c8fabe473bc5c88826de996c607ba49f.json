{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { actionChannel, all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, dummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction addPost(action) {\n  var newPost;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          newPost = dummyPost(action.data);\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: newPost\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: newPost\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","actionChannel","all","call","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","dummyPost","ADD_POST_TO_ME","addPostAPI","post","action","newPost","data","type","error","response","addCommentAPI"],"mappings":";;oDAaUA,O;qDAyBAC,U;qDAiBAC,Y;qDAGAC,e;qDAIeC,Q;;AA9DzB,SAASC,aAAT,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,GAAhD,EAAqDC,UAArD,QAAuE,oBAAvE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,gBADF,EACoBC,gBADpB,EACsCC,gBADtC,EAEEC,mBAFF,EAEuBC,mBAFvB,EAE4CC,mBAF5C,EAEiEC,SAFjE,QAGO,kBAHP;AAIA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAOT,KAAK,CAACU,IAAN,CAAW,cAAX,CAAP;AACD;;AAED,SAAUtB,OAAV,CAAkBuB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAIUgB,UAAAA,OAJV,GAIoBL,SAAS,CAACI,MAAM,CAACE,IAAR,CAJ7B;AAAA;AAKI,iBAAMf,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEZ,gBADE;AAERW,YAAAA,IAAI,EAAED;AAFE,WAAD,CAAT;;AALJ;AAAA;AASI,iBAAMd,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEN,cADE;AAERK,YAAAA,IAAI,EAAED;AAFE,WAAD,CAAT;;AATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcI,iBAAMd,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAEX,gBADE;AAERY,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaH;AAFZ,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAASI,aAAT,GAAyB;AACvB,SAAOjB,KAAK,CAACU,IAAN,CAAW,iBAAX,CAAP;AACD;;AAED,SAAUrB,UAAV,CAAqBsB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMf,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAET,mBADE;AAERQ,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMf,GAAG,CAAC;AACRgB,YAAAA,IAAI,EAAER,mBADE;AAERS,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaH;AAFZ,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUvB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACE,gBAAD,EAAmBb,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACK,mBAAD,EAAsBf,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CACRG,IAAI,CAACP,YAAD,CADI,EAERO,IAAI,CAACN,eAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { actionChannel, all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, dummyPost, \n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI); \n    yield delay(1000);\n    const newPost = dummyPost(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: newPost\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}