{"ast":null,"code":"import { actionChannel, all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, dummyPost, REMOVE_POST_OF_ME, generateDummyPost, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI); \n    yield delay(1000);\n    const newPost = dummyPost(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: newPost\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post('/api/removePost');\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI); \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.post('/api/loadPosts');\n}\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(loadPostsAPI); \n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/sagas/post.js"],"names":["actionChannel","all","call","delay","fork","put","takeLatest","throttle","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","REMOVE_POST_OF_ME","generateDummyPost","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","addPostAPI","post","addPost","action","newPost","data","type","err","error","response","addCommentAPI","addComment","removePostAPI","removePost","loadPostsAPI","loadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { actionChannel, all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, dummyPost, REMOVE_POST_OF_ME, generateDummyPost, \n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI); \n    yield delay(1000);\n    const newPost = dummyPost(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: newPost\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction removePostAPI() {\n  return axios.post('/api/removePost');\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI); \n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction loadPostsAPI() {\n  return axios.post('/api/loadPosts');\n}\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(loadPostsAPI); \n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchLoadPosts() {\n  yield throttle(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}