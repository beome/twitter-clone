{"ast":null,"code":"import { actionChannel, all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, dummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI); \n    yield delay(1000);\n    const newPost = dummyPost(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: newPost\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/sagas/post.js"],"names":["actionChannel","all","call","delay","fork","put","takeLatest","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","dummyPost","ADD_POST_TO_ME","addPostAPI","post","addPost","action","newPost","data","type","err","error","response","addCommentAPI","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,GAAhD,EAAqDC,UAArD,QAAuE,oBAAvE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,gBADF,EACoBC,gBADpB,EACsCC,gBADtC,EAEEC,mBAFF,EAEuBC,mBAFvB,EAE4CC,mBAF5C,EAEiEC,SAFjE,QAGO,kBAHP;AAIA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAOT,KAAK,CAACU,IAAN,CAAW,cAAX,CAAP;AACD;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMiB,OAAO,GAAGN,SAAS,CAACK,MAAM,CAACE,IAAR,CAAzB;AACA,UAAMhB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEb,gBADE;AAERY,MAAAA,IAAI,EAAED;AAFE,KAAD,CAAT;AAIA,UAAMf,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEP,cADE;AAERM,MAAAA,IAAI,EAAED;AAFE,KAAD,CAAT;AAID,GAZD,CAYE,OAAOG,GAAP,EAAY;AACZ,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEZ,gBADE;AAERc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAFZ,KAAD,CAAT;AAKD;AACF;;AACD,SAASK,aAAT,GAAyB;AACvB,SAAOnB,KAAK,CAACU,IAAN,CAAW,iBAAX,CAAP;AACD;;AAED,UAAUU,UAAV,CAAqBR,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEV,mBADE;AAERS,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZ,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAET,mBADE;AAERW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaJ;AAFZ,KAAD,CAAT;AAKD;AACF;;AAED,UAAUO,YAAV,GAAyB;AACvB,QAAMtB,UAAU,CAACE,gBAAD,EAAmBU,OAAnB,CAAhB;AACD;;AACD,UAAUW,eAAV,GAA4B;AAC1B,QAAMvB,UAAU,CAACK,mBAAD,EAAsBgB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CACRG,IAAI,CAACwB,YAAD,CADI,EAERxB,IAAI,CAACyB,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { actionChannel, all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, \n  ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, dummyPost, \n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI() {\n  return axios.post('/api/addPost');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI); \n    yield delay(1000);\n    const newPost = dummyPost(action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: newPost\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: newPost\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\nfunction addCommentAPI() {\n  return axios.post('/api/addComment');\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI); \n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n  ]);\n}"]},"metadata":{},"sourceType":"module"}