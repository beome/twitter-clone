{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useSelector } from 'react-redux';\nimport shortid from 'shortid';\nvar initialState = {\n  mainPosts: [{\n    id: shortid.generate(),\n    User: {\n      id: shortid.generate(),\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false\n};\nexport var dummyPost = function dummyPost(data) {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname\n    },\n    Images: [],\n    Comments: []\n  };\n};\nexport var dummyComment = function dummyComment(data) {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname\n    }\n  };\n};\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostDone: true,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts))\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostDone: false,\n          addPostError: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data)].concat(_toConsumableArray(post.Comments));\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: true,\n          mainPosts: mainPosts\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: false,\n          addCommentError: action.error\n        });\n      }\n\n    case REMOVE_POST_OF_ME:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [state.mainPosts.filter(function (v) {\n            return v.User.id !== action.data.userId;\n          })]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/reducers/post.js"],"names":["useSelector","shortid","initialState","mainPosts","id","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","userId","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_OF_ME","addPost","type","addComment","reducer","state","action","error","postIndex","findIndex","v","postId","post","filter"],"mappings":"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","sourcesContent":["import { useSelector } from 'react-redux';\nimport shortid from 'shortid';\nconst initialState = {\n  mainPosts: [{\n    id: shortid.generate(),\n    User: {\n      id: shortid.generate(),\n      nickname: '제로초',\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n    }],\n    Comments: [{\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero',\n      },\n      content: '우와 개정판이 나왔군요~',\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero',\n      },\n      content: '얼른 사고싶어요~',\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false,\n}\n\nexport const dummyPost = (data) => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname,\n    },\n    Images: [],\n    Comments: [],\n  };\n};\nexport const dummyComment = (data) => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname,\n    },\n   \n  };\n};\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n\nexport const addPost = (data) => {\n  return ({\n    type: ADD_POST_REQUEST,\n    data: data,\n  });\n};\n\nexport const addComment = (data) => {\n  return ({\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  });\n};\n\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST: {\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null,\n      };\n    }\n    case ADD_POST_SUCCESS: {\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostDone: true,\n        mainPosts: [action.data, ...state.mainPosts],\n      };\n    }\n    case ADD_POST_FAILURE: {\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostDone: false,\n        addPostError: action.error,\n      };\n    }\n    case ADD_COMMENT_REQUEST: {\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null,\n      };\n    }\n    case ADD_COMMENT_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n      const post = {...state.mainPosts[postIndex]};\n      post.Comments = [dummyComment(action.data), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = post;\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentDone: true,\n        mainPosts\n      };\n    }\n    case ADD_COMMENT_FAILURE: {\n      return {\n        ...state,\n        addCommentLoading: false,\n        addCommentDone: false,\n        addCommentError: action.error,\n      };\n    }\n    case REMOVE_POST_OF_ME: {\n      return {\n        ...state,\n        mainPosts: [state.mainPosts.filter((v) => v.User.id !== action.data.userId)]\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}