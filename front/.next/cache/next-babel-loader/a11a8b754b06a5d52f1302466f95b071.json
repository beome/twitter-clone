{"ast":null,"code":"import shortid from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nconst initialState = {\n  mainPosts: [{\n    id: shortid.generate(),\n    User: {\n      id: shortid.generate(),\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: false\n};\nexport const generateDummyPost = number => Array(number).fill().map((v, i) => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    id: shortid.generate(),\n    src: faker.image.image()\n  }, {\n    id: shortid.generate(),\n    src: faker.image.image()\n  }, {\n    id: shortid.generate(),\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph()\n  }, {\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const dummyPost = data => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname\n    },\n    Images: [],\n    Comments: []\n  };\n};\nexport const dummyComment = data => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname\n    }\n  };\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPost = data => {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport const addComment = data => {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nexport const removePost = data => {\n  return {\n    type: REMOVE_POST_REQUEST,\n    data: data\n  };\n};\nexport const loadPosts = () => {\n  return {\n    type: LOAD_POSTS_REQUEST\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        {\n          draft.addPostLoading = true;\n          draft.addPostDone = false;\n          draft.addPostError = null;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = true; // draft.mainPosts = [action.data, ...state.mainPosts];\n\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          draft.addPostLoading = false;\n          draft.addPostDone = false;\n          draft.addPostError = action.error;\n          break;\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.addCommentLoading = true;\n          draft.addCommentDone = false;\n          draft.addCommentError = null;\n          break;\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          draft.addCommentLoading = false;\n          draft.addCommentDone = false;\n          draft.addCommentError = action.error;\n          break;\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          draft.removeoPostLoading = true;\n          draft.removeoPostDone = false;\n          draft.removeoPostError = null;\n          break;\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n          draft.removePostLoading = false;\n          draft.removePostDone = true;\n          break;\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          draft.removeoPostLoading = false;\n          draft.removeoPostDone = false;\n          draft.removeoPostError = action.error;\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/beom/Documents/dev/twitter-clone/front/reducers/post.js"],"names":["shortid","produce","faker","initialState","mainPosts","id","generate","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","v","i","name","findName","lorem","paragraph","image","sentence","dummyPost","data","userId","dummyComment","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","addPost","type","addComment","removePost","loadPosts","reducer","state","action","draft","unshift","error","post","find","postId","removeoPostLoading","removeoPostDone","removeoPostError","filter"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,CAAC;AACVC,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADM;AAEVC,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFI;AAMVC,IAAAA,OAAO,EAAE,yBANC;AAOVC,IAAAA,MAAM,EAAE,CAAC;AACPL,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADG;AAEPK,MAAAA,GAAG,EAAE;AAFE,KAAD,EAGL;AACDN,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADH;AAEDK,MAAAA,GAAG,EAAE;AAFJ,KAHK,EAML;AACDN,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADH;AAEDK,MAAAA,GAAG,EAAE;AAFJ,KANK,CAPE;AAiBVC,IAAAA,QAAQ,EAAE,CAAC;AACTL,MAAAA,IAAI,EAAE;AACJF,QAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,QAAAA,QAAQ,EAAE;AAFN,OADG;AAKTC,MAAAA,OAAO,EAAE;AALA,KAAD,EAMP;AACDF,MAAAA,IAAI,EAAE;AACJF,QAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,QAAAA,QAAQ,EAAE;AAFN,OADL;AAKDC,MAAAA,OAAO,EAAE;AALR,KANO;AAjBA,GAAD,CADQ;AAgCnBI,EAAAA,UAAU,EAAE,EAhCO;AAiCnBC,EAAAA,cAAc,EAAE,KAjCG;AAkCnBC,EAAAA,WAAW,EAAE,KAlCM;AAmCnBC,EAAAA,YAAY,EAAE,KAnCK;AAoCnBC,EAAAA,iBAAiB,EAAE,KApCA;AAqCnBC,EAAAA,cAAc,EAAE,KArCG;AAsCnBC,EAAAA,eAAe,EAAE,KAtCE;AAuCnBC,EAAAA,iBAAiB,EAAE,KAvCA;AAwCnBC,EAAAA,cAAc,EAAE,KAxCG;AAyCnBC,EAAAA,eAAe,EAAE;AAzCE,CAArB;AA4CA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAYC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAC/ExB,EAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EAD2E;AAE/EC,EAAAA,IAAI,EAAE;AACJF,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,IAAAA,QAAQ,EAAEN,KAAK,CAAC4B,IAAN,CAAWC,QAAX;AAFN,GAFyE;AAM/EtB,EAAAA,OAAO,EAAEP,KAAK,CAAC8B,KAAN,CAAYC,SAAZ,EANsE;AAO/EvB,EAAAA,MAAM,EAAE,CAAC;AACPL,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADG;AAEPK,IAAAA,GAAG,EAAET,KAAK,CAACgC,KAAN,CAAYA,KAAZ;AAFE,GAAD,EAGN;AACA7B,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADJ;AAEAK,IAAAA,GAAG,EAAET,KAAK,CAACgC,KAAN,CAAYA,KAAZ;AAFL,GAHM,EAMN;AACA7B,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADJ;AAEAK,IAAAA,GAAG,EAAET,KAAK,CAACgC,KAAN,CAAYA,KAAZ;AAFL,GANM,CAPuE;AAiB/EtB,EAAAA,QAAQ,EAAE,CAAC;AACTL,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,MAAAA,QAAQ,EAAEN,KAAK,CAAC4B,IAAN,CAAWC,QAAX;AAFN,KADG;AAKTtB,IAAAA,OAAO,EAAEP,KAAK,CAAC8B,KAAN,CAAYC,SAAZ;AALA,GAAD,EAMP;AACD1B,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADA;AAEJE,MAAAA,QAAQ,EAAEN,KAAK,CAAC4B,IAAN,CAAWC,QAAX;AAFN,KADL;AAKDtB,IAAAA,OAAO,EAAEP,KAAK,CAAC8B,KAAN,CAAYG,QAAZ;AALR,GANO;AAjBqE,CAAX,CAAzB,CAAtC;AAkCP,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAU;AACjC,SAAO;AACLhC,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADC;AAELG,IAAAA,OAAO,EAAE4B,IAAI,CAAC5B,OAFT;AAGLF,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAEgC,IAAI,CAACC,MADL;AAEJ9B,MAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAFX,KAHD;AAOLE,IAAAA,MAAM,EAAE,EAPH;AAQLE,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD,CAXM;AAYP,OAAO,MAAM2B,YAAY,GAAIF,IAAD,IAAU;AACpC,SAAO;AACLhC,IAAAA,EAAE,EAAEL,OAAO,CAACM,QAAR,EADC;AAELG,IAAAA,OAAO,EAAE4B,IAAI,CAAC5B,OAFT;AAGLF,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAEgC,IAAI,CAACC,MADL;AAEJ9B,MAAAA,QAAQ,EAAE6B,IAAI,CAAC7B;AAFX;AAHD,GAAP;AASD,CAVM;AAYPL,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuBoC,MAAvB,CACvBjB,iBAAiB,CAAC,EAAD,CADM,CAAzB;AAIA,OAAO,MAAMkB,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,OAAO,GAAIjB,IAAD,IAAU;AAC/B,SAAQ;AACNkB,IAAAA,IAAI,EAAEX,gBADA;AAENP,IAAAA,IAAI,EAAEA;AAFA,GAAR;AAID,CALM;AAOP,OAAO,MAAMmB,UAAU,GAAInB,IAAD,IAAU;AAClC,SAAQ;AACNkB,IAAAA,IAAI,EAAER,mBADA;AAENV,IAAAA,IAAI,EAAEA;AAFA,GAAR;AAID,CALM;AAOP,OAAO,MAAMoB,UAAU,GAAIpB,IAAD,IAAU;AAClC,SAAQ;AACNkB,IAAAA,IAAI,EAAEL,mBADA;AAENb,IAAAA,IAAI,EAAEA;AAFA,GAAR;AAID,CALM;AAOP,OAAO,MAAMqB,SAAS,GAAG,MAAM;AAC7B,SAAQ;AACNH,IAAAA,IAAI,EAAEd;AADA,GAAR;AAGD,CAJM;;AAQP,MAAMkB,OAAO,GAAG,CAACC,KAAK,GAAGzD,YAAT,EAAuB0D,MAAvB,KAAkC;AAChD,SAAO5D,OAAO,CAAC2D,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACN,IAAf;AACE,WAAKX,gBAAL;AAAuB;AACrBkB,UAAAA,KAAK,CAAChD,cAAN,GAAuB,IAAvB;AACAgD,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,KAApB;AACA+C,UAAAA,KAAK,CAAC9C,YAAN,GAAqB,IAArB;AACA;AACD;;AACD,WAAK6B,gBAAL;AAAuB;AACrBiB,UAAAA,KAAK,CAAChD,cAAN,GAAuB,KAAvB;AACAgD,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,IAApB,CAFqB,CAGrB;;AACA+C,UAAAA,KAAK,CAAC1D,SAAN,CAAgB2D,OAAhB,CAAwBF,MAAM,CAACxB,IAA/B;AACA;AACD;;AACD,WAAKS,gBAAL;AAAuB;AACrBgB,UAAAA,KAAK,CAAChD,cAAN,GAAuB,KAAvB;AACAgD,UAAAA,KAAK,CAAC/C,WAAN,GAAoB,KAApB;AACA+C,UAAAA,KAAK,CAAC9C,YAAN,GAAqB6C,MAAM,CAACG,KAA5B;AACA;AACD;;AACD,WAAKjB,mBAAL;AAA0B;AACxBe,UAAAA,KAAK,CAAC7C,iBAAN,GAA0B,IAA1B;AACA6C,UAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,UAAAA,KAAK,CAAC3C,eAAN,GAAwB,IAAxB;AACA;AACD;;AACD,WAAK6B,mBAAL;AAA0B;AACxB,gBAAMiB,IAAI,GAAGH,KAAK,CAAC1D,SAAN,CAAgB8D,IAAhB,CAAsBtC,CAAD,IAAOA,CAAC,CAACvB,EAAF,KAASwD,MAAM,CAACxB,IAAP,CAAY8B,MAAjD,CAAb;AACAF,UAAAA,IAAI,CAACrD,QAAL,CAAcmD,OAAd,CAAsBxB,YAAY,CAACsB,MAAM,CAACxB,IAAR,CAAlC;AACAyB,UAAAA,KAAK,CAAC7C,iBAAN,GAA0B,KAA1B;AACA6C,UAAAA,KAAK,CAAC5C,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAK+B,mBAAL;AAA0B;AACxBa,UAAAA,KAAK,CAAC7C,iBAAN,GAA0B,KAA1B;AACA6C,UAAAA,KAAK,CAAC5C,cAAN,GAAuB,KAAvB;AACA4C,UAAAA,KAAK,CAAC3C,eAAN,GAAwB0C,MAAM,CAACG,KAA/B;AACA;AACD;;AACD,WAAKd,mBAAL;AAA0B;AACxBY,UAAAA,KAAK,CAACM,kBAAN,GAA2B,IAA3B;AACAN,UAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACAP,UAAAA,KAAK,CAACQ,gBAAN,GAAyB,IAAzB;AACA;AACD;;AACD,WAAKnB,mBAAL;AAA0B;AACxBW,UAAAA,KAAK,CAAC1D,SAAN,GAAkB0D,KAAK,CAAC1D,SAAN,CAAgBmE,MAAhB,CAAwB3C,CAAD,IAAOA,CAAC,CAACvB,EAAF,KAASwD,MAAM,CAACxB,IAAP,CAAY8B,MAAnD,CAAlB;AACAL,UAAAA,KAAK,CAAC1C,iBAAN,GAA0B,KAA1B;AACA0C,UAAAA,KAAK,CAACzC,cAAN,GAAuB,IAAvB;AACA;AACD;;AACD,WAAK+B,mBAAL;AAA0B;AACxBU,UAAAA,KAAK,CAACM,kBAAN,GAA2B,KAA3B;AACAN,UAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACAP,UAAAA,KAAK,CAACQ,gBAAN,GAAyBT,MAAM,CAACG,KAAhC;AACA;AACD;;AACD;AACE;AA1DJ;AA4DD,GA7Da,CAAd;AA8DD,CA/DD;;AAiEA,eAAeL,OAAf","sourcesContent":["import shortid from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nconst initialState = {\n  mainPosts: [{\n    id: shortid.generate(),\n    User: {\n      id: shortid.generate(),\n      nickname: '제로초',\n    },\n    content: '첫 번째 게시글 #해쉬태그 #박범진 #개발',\n    Images: [{\n      id: shortid.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n    }, {\n      id: shortid.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n    }],\n    Comments: [{\n      User: {\n        id: shortid.generate(),\n        nickname: 'nero',\n      },\n      content: '우와 개정판이 나왔군요~',\n    }, {\n      User: {\n        id: shortid.generate(),\n        nickname: 'hero',\n      },\n      content: '얼른 사고싶어요~',\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: false,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: false,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: false,\n}\n\nexport const generateDummyPost = (number) => Array(number).fill().map((v, i) => ({\n  id: shortid.generate(),\n  User: {\n    id: shortid.generate(),\n    nickname: faker.name.findName(),\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    id: shortid.generate(),\n    src: faker.image.image(),\n  },{\n    id: shortid.generate(),\n    src: faker.image.image(),\n  },{\n    id: shortid.generate(),\n    src: faker.image.image(),\n  }], \n  Comments: [{\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.paragraph(),\n  }, {\n    User: {\n      id: shortid.generate(),\n      nickname: faker.name.findName(),\n    },\n    content: faker.lorem.sentence(),\n  }]\n}));\n\n\n\nexport const dummyPost = (data) => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname,\n    },\n    Images: [],\n    Comments: [],\n  };\n};\nexport const dummyComment = (data) => {\n  return {\n    id: shortid.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.nickname,\n    },\n   \n  };\n};\n\ninitialState.mainPosts = initialState.mainPosts.concat(\n  generateDummyPost(10)\n);\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\n\nexport const addPost = (data) => {\n  return ({\n    type: ADD_POST_REQUEST,\n    data: data,\n  });\n};\n\nexport const addComment = (data) => {\n  return ({\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  });\n};\n\nexport const removePost = (data) => {\n  return ({\n    type: REMOVE_POST_REQUEST,\n    data: data\n  });\n};\n\nexport const loadPosts = () => {\n  return ({\n    type: LOAD_POSTS_REQUEST,\n  });\n};\n\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST: {\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      }\n      case ADD_POST_SUCCESS: {\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        // draft.mainPosts = [action.data, ...state.mainPosts];\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n      case ADD_POST_FAILURE: {\n        draft.addPostLoading = false;\n        draft.addPostDone = false;\n        draft.addPostError = action.error;\n        break;\n      }\n      case ADD_COMMENT_REQUEST: {\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      }\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n      case ADD_COMMENT_FAILURE: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = false;\n        draft.addCommentError = action.error;\n        break;\n      }\n      case REMOVE_POST_REQUEST: {\n        draft.removeoPostLoading = true;\n        draft.removeoPostDone = false;\n        draft.removeoPostError = null;\n        break;\n      }\n      case REMOVE_POST_SUCCESS: {\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.postId);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      }\n      case REMOVE_POST_FAILURE: {\n        draft.removeoPostLoading = false;\n        draft.removeoPostDone = false;\n        draft.removeoPostError = action.error;\n        break;\n      }\n      default:\n        break;\n    }\n  });\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}